rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // [TEMP TEST] Allow read access for anyone, and write access for any logged-in user.
    match /stalls/{stallId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // [TEMP TEST] Allow any logged-in user to read/write their own document.
    // This rule is effectively the same but stated for clarity during testing.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Admins can read/write any user document (useful for support).
    match /users/{userId} {
      allow read, write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Admins can read/write the admins collection. No one else can.
    match /admins/{adminId} {
        allow read, write: if request.auth != null && request.auth.uid == adminId;
    }
    
    // Anyone can read rental history, but only admins can write/delete.
    // In a real app, you might restrict reads to the specific user or admins.
    match /rentals/{rentalId} {
        allow read: if true;
        allow write, delete: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow anyone to read processed payments for idempotency checks by the user,
    // but only admins can create them (though they are created by backend functions).
    match /processed_stripe_payments/{paymentId} {
        allow read: if true;
        allow write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

  }
}
